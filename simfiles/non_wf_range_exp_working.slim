/*////////////////////////////////
Initialize and define constants
*////////////////////////////////
initialize() {
	// paths
	defineConstant("root", "~/LOTTERHOS_LAB/lotterhos_lab_hackathon2018/TTT_2pheno_2envi/");
	defineConstant("path", root + "results/");
	defineConstant("inputpath", root + "inputfiles/");
	// constants from orig script
	defineConstant("my_seed", getSeed()); 
	defineConstant("sigma_C", 0.027); // smaller is weaker competition; weaker competition allows more similar phenotypes to coexist
	defineConstant("sigma_K", 1.25); // smaller is stronger stabilizing selection, // larger is weaker (wider) stabilizing selection
	defineConstant("sigma_xy", 0.25); // set sigma_xy based on dispersal scale!! (modified child callback)
	defineConstant("sigma_d", 0.009); // set sigma_xy based on dispersal scale!! 
	defineConstant("sigma_stat", 4.0); //variation for the first 4Ne generation
	defineConstant("sigma_M", 2.0); // larger is less assortative mating
	//defineConstant("N", 1000); // samples size
	defineConstant("r", 1e-05); // recombination rate
	defineConstant("QTL_prop", 1.0); // proportion of element that is QTL
	
	// initialize non WF simulation
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy", periodicity="xy");
	initializeTreeSeq();
	defineConstant("K", 800);	// carrying capacity
	defineConstant("S", 0.1); // spatial competition distance
	
	initializeMutationType("m2", 0.5, "f", 0.0); // QTL
	initializeGenomicElementType("g1", m2, QTL_prop); //QTL
	
	for (index in 1:6)
	{
		initializeGenomicElement(g1, index * 50000 + 1, index * 50000 + 50000);
	};
	
	// initilize recombination rates and ends
	initializeRecombinationRate(c(rep(c(r, 0.5), 6), r), 
	ends=c(50000, 50001, 100000, 100001, 150000, 150001, 
			200000, 200001, 250000, 250001, 300000, 300001, 350000));

	initializeMutationRate(1e-7);
	
	// spatial mate choice
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance = sigma_C);
	i1.setInteractionFunction("n", 1.0, sigma_M);
	
	// density dependent selection
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=sigma_C * 5);
	i2.setInteractionFunction("n", 1.0, sigma_C);
	
	//define variables for variance-covariance matrix
	// this determines the distribution from which mutational effects are drawn from
	defineConstant("QTL_mu", c(0, 0));
	defineConstant("QTL_cov", 0);
	defineConstant("QTL_var", sigma_K);
	defineConstant("QTL_sigma", matrix(c(QTL_var, QTL_cov, QTL_cov, QTL_var), nrow=2));
	
	//print matrix to output
	catn();
	catn("QTL DFE means: ");
	print(QTL_mu);
	catn();
	catn("QTL DFE variance-covariance matrix: ");
	print(QTL_sigma);
}

reproduction() {
	// choose nearest neighbor as mate, within max distance
	mate = i1.nearestNeighbors(individual, 1);
	
	for (i in seqLen(rpois(1, 0.1)))
	{
		if (mate.size())
			offspring = subpop.addCrossed(individual, mate);
		else
			offspring = subpop.addSelfed(individual);
			 
	// set offspring position
	pos = individual.spatialPosition + rnorm(2,0,sigma_d);
	offspring.setSpatialPosition(p1.pointReflected(pos));
	}
}

// create an initial population of 10 individuals
1 early() {
	// create file to keep track of simulation parameters
	param = "sigma_C" + "\t" + sigma_C + "\n" + 
	"sigma_K" + "\t" + sigma_K + "\n" + 
	"sigma_M" + "\t" + sigma_M + "\n" + 
	"sigma_xy" + "\t" + sigma_xy + "\n" + 
	"sigma_d" + "\t" + sigma_d + "\n" + 
	"QTL_cov" + "\t" + QTL_cov + "\n" + 
	"QTL_var" + "\t" + QTL_var + "\n" + 
	"sigma_stat" + "\t" + sigma_stat + "\n" + 
	"QTL_prop" + "\t" + QTL_prop;
	
	// write simulation parameter file
   writeFile(paste(c(path, my_seed, "_", "simulation_parameters.txt"), sep=""), param);

	// create file with header which will keep track of simulation results
	out_header = "sim.generation" + "\t" + "sample_size" + "\t" + 
	"mean_phen0" + "\t" + "sd_phen0" + "\t" + 
	"corr0_1" + "\t" + "corr0_2" + "\t" + 
	"mean_phen1" + "\t" + "sd_phen1" + "\t" + 
	"corr1_1" + "\t" + "corr1_2";
	
	// write phenotype-environment file
	writeFile(paste(c(path, my_seed, "_", sigma_K, "_outputPhenEnv_2trait_1mut_2env.txt"), sep=""), out_header, append=T);

	// add single subpopulation
	sim.addSubpop("p1", 100);
	
	//set spatial bounds to be between 0 and 1 for x and y
	p1.setSpatialBounds(c(0.0, 0.0, 1.0, 0.1));
	
	// Add map 1 adaptive mean annual temperature for after gen 4000
	matmapLines = rev(readFile(inputpath + "MAT_adaptree_map_360x360.csv"));
   matmapLines = sapply(matmapLines, "strsplit(applyValue, ',');");
   matmapValues = asFloat(matmapLines);

   p1.defineSpatialMap("map1", "xy", c(360, 360), matmapValues,
                valueRange=c(-1.0, 1.0), colors=c("red", "yellow"));
   
   // add map 2 adaptive climate-moisture deficit for after gen 4000
   cmdmapLines = rev(readFile(inputpath + "CMD_adaptree_map_360x360.csv"));
   cmdmapLines = sapply(cmdmapLines, "strsplit(applyValue, ',');");
   cmdmapValues = asFloat(cmdmapLines);

   p1.defineSpatialMap("map2", "xy", c(360, 360), cmdmapValues,
                valueRange=c(-1.0, 1.0), colors=c("red", "yellow"));
                
   // add map 3, static map for 1st 4000 gen
   defineConstant("map3Values", rep(0.0, 25));
	p1.defineSpatialMap("map3", "xy", c(5, 5), map3Values, interpolate=T,
	valueRange=c(-3.0, 3.0), colors=c("blue", "white"));
	
	// initialize where individuals start
	for (ind in p1.individuals)
		ind.setSpatialPosition(p1.pointUniform());
		
	//set spatial bounds to be between 0 and 1 for x and y
	p1.setSpatialBounds(c(0.0, 0.0, 1.0, 1.0));
}

// provide density-dependent selection

early() {
	i2.evaluate();
	// spatial competition provides density-dependent selection
	inds = p1.individuals;
	competition = i2.totalOfNeighborStrengths(inds);

	competition = (competition + 1) / (2 * PI * sigma_C^2);
	inds.fitnessScaling = K / competition;
}

/*///////////////////////////
ADD EFFECT SIZES OF MUTATIONS
*///////////////////////////

early() {
	// add effect sizes into new mutation objects
	// this must come before setting phenotype values!
	all_m2 = sim.mutationsOfType(m2);
	new_m2 = all_m2[all_m2.originGeneration == sim.generation];
	
	if (size(new_m2))
	{
		// draw mutational effects for all new mutations at once; this is
		// faster than drawing them individually if there are many of them
		effects = rmvnorm(size(new_m2), QTL_mu, QTL_sigma);
		
		// remember all drawn effects, for our final output
		old_effects = sim.getValue("all_effects");
		sim.setValue("all_effects", rbind(old_effects, effects));
		
		for (i in seqAlong(new_m2)){
			e = drop(effects[i,]);	// each draw is one row in the matrix result from rmvnorm
			mut = new_m2[i];
			mut.setValue("e0", e[0]);
			mut.setValue("e1", e[1]);
			
		}
	}
}

late() 
{ 
	// look for mates
	i1.evaluate();
	catn(size(p1.individuals));
}

/*///////////////////////////
SET PHENOTYPE VALUES
*///////////////////////////

early() {
	// construct phenotypes from additive effects of QTL mutations
	// this must come after adding effect sizes of mutations!
	inds = sim.subpopulations.individuals;

	for (ind in inds){
		muts = ind.genomes.mutationsOfType(m2);
		
		// we have to special-case when muts is empty, since getValue()
		// on an empty vector is NULL and sum(NULL) is an error
		
		if (size(muts)){
			ind.setValue("phenotype0", sum(muts.getValue("e0")));
			ind.setValue("phenotype1", sum(muts.getValue("e1")));
		} 
		else {
			ind.setValue("phenotype0", 0);
			ind.setValue("phenotype1", 0);
		}
	}

	// color individuals according to phenotype; alternating between phenotypes every other generation
	if ((sim.generation % 2 == 0) & (sim.generation > 1)) {
	inds.color = p1.spatialMapColor("map1", asFloat(inds.getValue("phenotype0")));
	}
	else {
	inds.color = p1.spatialMapColor("map1", asFloat(inds.getValue("phenotype1")));
	}

	// get information on m2 mutations and environments for each individual
	if (sim.generation % 200 == 0){ 
		g = sim.subpopulations.genomes;
		m = sortBy(unique(g.mutationsOfType(m2)), "position"); 
		mut = sim.mutationsOfType(m2);

		// get environmental value from map 1 for each individual
		env=c();
		for (ind in inds){
  			env = c(env, p1.spatialMapValue("map1", ind.spatialPosition[0:1]));
  		}

		// get environmental value from map 2 for each individual
		env2=c();
		for (ind in inds){
  			env2 = c(env2, p1.spatialMapValue("map2", ind.spatialPosition[0:1]));
  		}
  		
  		// correlation between phenotype0 and map1
		corr0_1 = sum((env- mean(env))/sd(env)*(inds.getValue("phenotype0")-
			mean(inds.getValue("phenotype0")))/sd(inds.getValue("phenotype0")))/
			(size(inds.getValue("phenotype0"))-1);
		
		// correlation between phenotype0 and map2
		corr0_2 = sum((env2- mean(env2))/sd(env2)*(inds.getValue("phenotype0")-
			mean(inds.getValue("phenotype0")))/sd(inds.getValue("phenotype0")))/
			(size(inds.getValue("phenotype0"))-1);
		
		// correlation between phenotype1 and map1
		corr1_1 = sum((env- mean(env))/sd(env)*(inds.getValue("phenotype1")-
			mean(inds.getValue("phenotype1")))/sd(inds.getValue("phenotype1")))/
			(size(inds.getValue("phenotype1"))-1);
		
		// correlation between phenotype1 and map2
		corr1_2 = sum((env2- mean(env2))/sd(env2)*(inds.getValue("phenotype1")-
			mean(inds.getValue("phenotype1")))/sd(inds.getValue("phenotype1")))/
			(size(inds.getValue("phenotype1"))-1);
		
		// output for phenenv correlation
		out = paste(c(sim.generation, size(m), mean(inds.getValue("phenotype0")), 
			sd(inds.getValue("phenotype0")), corr0_1, corr0_2, mean(inds.getValue("phenotype1")), 
			sd(inds.getValue("phenotype1")), corr1_1, corr1_2), sep="\t");
		
		// write phenenv file every 200 generations
		writeFile(paste(c(path, my_seed, "_", sigma_K, "_outputPhenEnv_2trait_1mut_2env.txt"), sep=""), out, append=T);
   }
   
   // This is an extra bit of code to keep track of total fitness
	// tot_fit = p1.cachedFitness(NULL);
	// tot_fit_out = paste(c(tot_fit));
	// writeFile(paste(c(path, my_seed, "_", "_totalFitness_2trait_1mut_2env.txt"), sep=""), tot_fit_out, append=T);
   
}

/*///////////////////////////
EVALUATE FITNESS
*///////////////////////////

	fitness(NULL) {    // reward proximity to the optimum
		location = individual.spatialPosition[0:1];
		
	// optimums for each map are equal to the the value of the map at each individual's location
	// therefore, if phenotypes mismatch env, individuals will have lower fitness
	optimum1 = subpop.spatialMapValue("map1", location);
	optimum2 = subpop.spatialMapValue("map2", location);
	optimum3 = subpop.spatialMapValue("map3", location);
	
	// have individuals adapt to static map for 4Ne generations to build genetic variance
	if (sim.generation < 4000){
		// uncomment f1 lines below to keep track of fitness in this callback
		// f1 = exp(-0.5*((individual.getValue("phenotype0")-optimum3)^2*sigma_stat +
		//		(individual.getValue("phenotype1")-optimum3)^2*sigma_stat));
		// f1_out = paste(c(sim.generation, f1));
		// writeFile(paste(c(path, my_seed, "_", "_Fitness1_2trait_1mut_2env.txt"), sep=""), f1_out, append=T);
		
		return exp(-0.5*((individual.getValue("phenotype0")-optimum3)^2*sigma_stat + 
			(individual.getValue("phenotype1")-optimum3)^2*sigma_stat));
	}
	else {
		//phen0 adapts to map1(optimum1)
		//phen1 adapts to map2(optimum2)
		
		// f1 = exp(-0.5*((individual.getValue("phenotype0")-optimum1)^2*sigma_K + 
		// 	(individual.getValue("phenotype1")-optimum2)^2*sigma_K));
      // f1_out = paste(c(sim.generation, f1));
      // writeFile(paste(c(path, my_seed, "_", "_Fitness1_2trait_1mut_2env.txt"), sep=""), f1_out, append=T);
      
		return exp(-0.5*((individual.getValue("phenotype0")-optimum1)^2*sigma_K + 
			(individual.getValue("phenotype1")-optimum2)^2*sigma_K));
	}
}

	// calculate mating interaction strength between individuals
	interaction(i1) {
		return exp(-0.5*((exerter.spatialPosition[0] - receiver.spatialPosition[0])^2*sigma_xy + (exerter.spatialPosition[1]- 
		receiver.spatialPosition[1])^2*sigma_xy + (exerter.getValue("phenotype0") - 
		receiver.getValue("phenotype0"))^2*sigma_M + (exerter.getValue("phenotype1") - 
		receiver.getValue("phenotype1"))^2*sigma_M));
	}
	
// output all fixed mutations at end

8000 late(){
	sim.treeSeqOutput("/tmp/slim_" + my_seed + ".trees");
	sim.outputFixedMutations();
}
